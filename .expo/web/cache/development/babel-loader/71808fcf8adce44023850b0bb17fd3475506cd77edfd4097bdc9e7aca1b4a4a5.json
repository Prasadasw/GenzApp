{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function ScratchCard(_ref) {\n  var image = _ref.image,\n    isSelected = _ref.isSelected;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    scratched = _useState2[0],\n    setScratched = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    scratchProgress = _useState4[0],\n    setScratchProgress = _useState4[1];\n  var handleScratch = function handleScratch(event) {\n    if (isSelected) {\n      setScratchProgress(function (prev) {\n        return Math.min(prev + 0.1, 1);\n      });\n      if (scratchProgress >= 0.7) {\n        setScratched(true);\n      }\n    }\n  };\n  return _jsx(PanGestureHandler, {\n    onGestureEvent: handleScratch,\n    children: _jsx(View, {\n      style: styles.container,\n      children: scratched ? _jsx(Image, {\n        source: image,\n        style: styles.image,\n        resizeMode: \"cover\"\n      }) : _jsx(View, {\n        style: [styles.overlay, {\n          opacity: 1 - scratchProgress\n        }],\n        children: _jsx(Text, {\n          style: styles.scratchText,\n          children: isSelected ? 'Scratch here!' : 'Select me!'\n        })\n      })\n    })\n  });\n}","map":{"version":3,"names":["React","useState","View","Image","Text","PanGestureHandler","jsx","_jsx","ScratchCard","_ref","image","isSelected","_useState","_useState2","_slicedToArray","scratched","setScratched","_useState3","_useState4","scratchProgress","setScratchProgress","handleScratch","event","prev","Math","min","onGestureEvent","children","style","styles","container","source","resizeMode","overlay","opacity","scratchText"],"sources":["C:/Users/Adarsh/Downloads/project-bolt-sb1-7zb7qmnh/project/src/components/ScratchCard.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, Image, Text, StyleSheet, Animated, ImageSourcePropType } from 'react-native';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\n\ninterface ScratchCardProps {\n  image: ImageSourcePropType;\n  isSelected: boolean;\n}\n\nexport default function ScratchCard({ image, isSelected }: ScratchCardProps) {\n  const [scratched, setScratched] = useState(false);\n  const [scratchProgress, setScratchProgress] = useState(0);\n\n  const handleScratch = (event) => {\n    if (isSelected) {\n      setScratchProgress((prev) => Math.min(prev + 0.1, 1));\n      if (scratchProgress >= 0.7) {\n        setScratched(true);\n      }\n    }\n  };\n\n  return (\n    <PanGestureHandler onGestureEvent={handleScratch}>\n      <View style={styles.container}>\n        {scratched ? (\n          <Image \n            source={image}\n            style={styles.image}\n            resizeMode=\"cover\"\n          />\n        ) : (\n          <View style={[styles.overlay, { opacity: 1 - scratchProgress }]}>\n            <Text style={styles.scratchText}>\n              {isSelected ? 'Scratch here!' : 'Select me!'}\n            </Text>\n          </View>\n        )}\n      </View>\n    </PanGestureHandler>\n  );\n}"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,IAAA;AAExC,SAASC,iBAAiB,QAAQ,8BAA8B;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAOjE,eAAe,SAASC,WAAWA,CAAAC,IAAA,EAA0C;EAAA,IAAvCC,KAAK,GAAAD,IAAA,CAALC,KAAK;IAAEC,UAAU,GAAAF,IAAA,CAAVE,UAAU;EACrD,IAAAC,SAAA,GAAkCX,QAAQ,CAAC,KAAK,CAAC;IAAAY,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA1CG,SAAS,GAAAF,UAAA;IAAEG,YAAY,GAAAH,UAAA;EAC9B,IAAAI,UAAA,GAA8ChB,QAAQ,CAAC,CAAC,CAAC;IAAAiB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAlDE,eAAe,GAAAD,UAAA;IAAEE,kBAAkB,GAAAF,UAAA;EAE1C,IAAMG,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,KAAK,EAAK;IAC/B,IAAIX,UAAU,EAAE;MACdS,kBAAkB,CAAC,UAACG,IAAI;QAAA,OAAKC,IAAI,CAACC,GAAG,CAACF,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC;MAAA,EAAC;MACrD,IAAIJ,eAAe,IAAI,GAAG,EAAE;QAC1BH,YAAY,CAAC,IAAI,CAAC;MACpB;IACF;EACF,CAAC;EAED,OACET,IAAA,CAACF,iBAAiB;IAACqB,cAAc,EAAEL,aAAc;IAAAM,QAAA,EAC/CpB,IAAA,CAACL,IAAI;MAAC0B,KAAK,EAAEC,MAAM,CAACC,SAAU;MAAAH,QAAA,EAC3BZ,SAAS,GACRR,IAAA,CAACJ,KAAK;QACJ4B,MAAM,EAAErB,KAAM;QACdkB,KAAK,EAAEC,MAAM,CAACnB,KAAM;QACpBsB,UAAU,EAAC;MAAO,CACnB,CAAC,GAEFzB,IAAA,CAACL,IAAI;QAAC0B,KAAK,EAAE,CAACC,MAAM,CAACI,OAAO,EAAE;UAAEC,OAAO,EAAE,CAAC,GAAGf;QAAgB,CAAC,CAAE;QAAAQ,QAAA,EAC9DpB,IAAA,CAACH,IAAI;UAACwB,KAAK,EAAEC,MAAM,CAACM,WAAY;UAAAR,QAAA,EAC7BhB,UAAU,GAAG,eAAe,GAAG;QAAY,CACxC;MAAC,CACH;IACP,CACG;EAAC,CACU,CAAC;AAExB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}